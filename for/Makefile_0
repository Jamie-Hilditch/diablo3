# Flags (pass as commandline variables e.g. make DEBUG=TRUE)
DEBUG ?= FALSE
SHARED_MEMORY ?= FALSE

#############################################################################
# Fortran 90 complier to use: gfortran or ifort
COMPILER = gfortran

# FFTW3 library to Link
FFTW_LIB = /share/software/user/open/fftw/3.3.10/lib

# FFTW include directory
FFTW_INCLUDE = /share/software/user/open/fftw/3.3.10/include

#############################################################################

LDFLAGS += -L$(FFTW_LIB) -lfftw3 -lgfortran

# Optimise or debug(compiler dependent)
ifeq ($(DEBUG),FALSE)
  ifeq ($(COMPILER),ifort)
    FCFLAGS += -O3 -fpp -ipo -xHost
  else ifeq ($(COMPILER),gfortran)
    FCFLAGS += -O3 -cpp -march=native -flto
  endif
else
  ifeq ($(COMPILER),ifort)
    FCFLAGS += -O0 -fpp -g check all traceback 
  else ifeq ($(COMPILER),gfortran)
    FCFLAGS += -O0 -cpp -g -fcheck=all -fbacktrace
  endif
endif
  
# Include FFTW
FCFLAGS += -I$(FFTW_INCLUDE)

# Shared memory
ifneq ($(SHARED_MEMORY),FALSE)
  FCFLAGS += -DSHARED_MEMORY
endif

# Parallel HDF5 compiler wrapper
COMPILER = h5pfc

SOURCES = parameters.o domain.o flow.o tools.o ics.o advance.o diagnostics.o phdf5.o

diablo: diablo.f90 $(SOURCES)
	$(COMPILER) $(FCFLAGS) $^ -o $@ $(LDFLAGS)

%.o: %.f90
	$(COMPILER) $(FCFLAGS) -c $<


parameters.o: parameters.f90 grid_def 

domain.o: domain.f90 parameters.o grid_mpi

fft.o: fft.f90 parameters.o domain.o

flow.o: flow.f90 parameters.o domain.o fft.o

tools.o: tools.f90 parameters.o domain.o flow.o

phdf5.o: phdf5.f90 parameters.o domain.o flow.o tools.o

boundary.o: boundary.f90 parameters.o domain.o fft.o flow.o

diagnostics.o: diagnostics.f90 parameters.o domain.o fft.o flow.o boundary.o

advance.o: advance.f90 parameters.o domain.o fft.o flow.o boundary.o tools.o \ 
		channel.f90 forcing.f90 les.f90

ics.o: ics.f90 parameters.o domain.o fft.o flow.o boundary.o phdf5.o advance.o


.PHONY: clean
clean:
	-rm -f *.o *.mod diablo
